import boto3
import json
import os
import sys
import datetime
import pprint
from datetime import timedelta

qname = os.environ['ConfigStream_Queue_Name']
# qname = 'hello-cdk-2-ConfigStreamQueue3A04D3D0-C4KYQFHLHSMX'
qname1 = os.environ['dispatch_Queue_Name']
# qname1 = 'ConfigStreamQueue.fifo'
bucket_name = os.environ['ConfigStream_backup_backet']
# bucket_name = 'config-stream-backup'
backet_region = os.environ['backet_region']
# backet_region = 'us-west-2'

s3_client = boto3.client('s3')
sqs_client = boto3.client('sqs')
sqs = boto3.resource('sqs')
s3 = boto3.resource('s3')
bucket = s3.Bucket(bucket_name)
ctclient = boto3.client('cloudtrail')
queue = sqs.get_queue_by_name(QueueName=qname)
queue1 = sqs.get_queue_by_name(QueueName=qname1)


def lambda_handler(event, context):
    while True:
        msg_list = queue.receive_messages()
        if msg_list:
            for message in msg_list:
                json_dict = json.loads(message.body)

                # create filename object path
                tpcarn = (json_dict['TopicArn'])
                tpcarnsp = (tpcarn.split(':'))
                tpregion = tpcarnsp[3]
                tpawsnum = tpcarnsp[4]
                ntime = (json_dict['Timestamp'])
                fname = tpawsnum + '_Config_' + tpregion + '_ConfigStoream_' + ntime + '.json'
                ndt = datetime.datetime.strptime(ntime, '%Y-%m-%dT%H:%M:%S.%fZ')
                nyear = str(ndt.year)
                nmonth = str(ndt.month)
                nday = str(ndt.day)
                opath = 'AWSLogs/' + tpregion + '/Config/' + tpregion + '/' + nyear + '/' + nmonth + '/' + nday + '/ConfigStream/' + fname

                cbody = json.loads(json_dict['Message'])

                # ConfigStream backup to s3
                ret = s3_client.put_object(Body=json.dumps(cbody),Bucket=bucket_name,Key=opath,ContentType='text/plain')
                print(ret)
                
                # Generate object url
                ourl = 'https://s3.console.aws.amazon.com/s3/object/' + bucket_name + '/' + opath + '?region=' + backet_region + '&tab=overview'

                if 'configurationItem' in cbody:
                    print(cbody)
                    # add s3url
                    cbody['s3url'] = ourl
                    cjson = json.dumps(cbody)
                    print(cjson)
                    # send sqs
                    ret = queue1.send_message(MessageBody=cjson,MessageGroupId='config-stream-dispatcher')
                    print(ret)
                else:
                    print("[INFO]: configurationItem is not exist")
                    print(cbody)
            message.delete()
        else:
            break
